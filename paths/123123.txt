import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.StringTokenizer;
import java.util.Vector;

public class Paths
{
	static StringTokenizer st;
	static BufferedReader in;
	static BufferedWriter out;
	
	static String nextToken()
	{
		while (st == null  !st.hasMoreTokens())
		{
			try
			{
				st = new StringTokenizer(in.readLine());
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
		return st.nextToken();
	}
	
	static int nextInt()
	{
		return Integer.parseInt(nextToken());
	}
	
	static void trace(int s)
	{
		System.out.println(s);
	}
	
	static void trace(String s)
	{
		System.out.println(s);
	}

	static class Edge
	{
		public int a;
		public int b;
		public int cap;
		public int flow;
		
		public Edge(int a, int b, int cap, int flow)
		{
			this.a = a;
			this.b = b;
			this.cap = cap;
			this.flow = flow;
		}
	}
	
	static int n;
	static int graph[][];
	static int current[][];
	static int source;
	static int target;
	static int dist[];
	static int path[];
	static int q[];
	static int nn;
	
	static final int INF = Integer.MAX_VALUE;
	
	static boolean bfs()
	{
		int ci = 0;
		int cm = 0;
		
		q[cm++] = source;
		
		for (int i = 0; i  2  n + 2; ++i)
		{
			dist[i] = -1;
		}
		dist[source] = 0;
		
		while (ci  cm)
		{
			int v = q[ci++];
			for (int to = 0; to  2  n + 2; ++to)
			{
				if (dist[to] == -1 && current[v][to]  graph[v][to])
				{
					q[cm++] = to;
					dist[to] = dist[v] + 1;
				}
			}
		}
		return dist[target] != -1;
	}
	 
	static int dfs (int v, int flow)
	{
		if (flow == 0)
		{
			return 0;
		}
		if (v == target)
		{
			return flow;
		}
		for (int to = path[v]; to  2  n + 2; ++to) 
		{
			if (dist[to] != dist[v] + 1)
			{
				continue;
			}
			
			int pushed = dfs(to, Math.min (flow, graph[v][to] - current[v][to]));
			if (pushed != 0) 
			{
				current[v][to] += pushed;
				current[to][v] -= pushed;
				return pushed;
			}
		}
		return 0;
	}
	
	static int findMaxFlow()
	{
		int flow = 0;
		while (bfs())
		{
			for (int i = 0; i  2  n + 2; ++i)
			{
				path[i] = 0;
			}
			
			int pushed = dfs(source, INF);
			while (pushed != 0)
			{
				System.out.println(pushed);
				flow += pushed;
				pushed = dfs(source, INF);
			}
		}
		return flow;
	}
	
	public static void main(String[] args)
	{
		try
		{
			in = new BufferedReader(new FileReader(paths.in));
			out = new BufferedWriter(new FileWriter(paths.out));
			n = nextInt();
			nn = 2  n + 2;
			int m = nextInt();
			
			graph = new int[nn][nn];
			current = new int[nn][nn];
			dist = new int[nn];
			path = new int[nn];
			q = new int[nn];
			source = 0;
			target = nn - 1;
			
			for (int i = 1; i  n + 1; ++i)
			{
				graph[source][i] = 1;
			}
			
			for (int i = n + 1; i  nn - 1; ++i)
			{
				graph[i][target] = 1;
			}
			
			for (int i = 0; i  m; ++i)
			{
				int a = nextInt();
				int b = nextInt() + n;
				graph[a][b] = 1;
			}
			
			out.write((n - findMaxFlow()) + );
			
			in.close();
			out.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
}